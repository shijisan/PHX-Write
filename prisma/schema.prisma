// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
// directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  iv   String?
  salt String?

  testString     String?
  testStringIv   String?
  testStringSalt String?

  accounts  Account[]
  sessions  Session[]
  notes     Note[]     @relation("UserNotes")
  documents Document[] @relation("UserDocuments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String   @id @default(cuid())
  content   String
  salt      String
  iv        String
  type      NoteType @default(wysiwyg)
  createdAt DateTime @default(now())

  userId String
  user   User   @relation("UserNotes", fields: [userId], references: [id], onDelete: Cascade)
}

enum NoteType {
  wysiwyg
  markdown
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String
  salt      String
  iv        String
  createdAt DateTime @default(now())

  userId String
  user   User   @relation("UserDocuments", fields: [userId], references: [id], onDelete: Cascade)
}

// ==================================================

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
